---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';

interface Props {
	entry: CollectionEntry<'blog'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const blog = await getCollection('blog');
	return blog.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Check if the blog post content includes citations
const rawContent = entry.body;
const hasCitations = rawContent.includes('citation:');
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/blog/"><Icon icon="arrow-left" /> Blog</a>
					<Hero title={entry.data.title} align="start">
						<div class="details">
							<div class="tags">
								{entry.data.tags.map((t: string) => <Pill>{t}</Pill>)}
							</div>
							<p class="description">{entry.data.description}</p>
                            <p class="date">{new Date(entry.data.publishDate).toISOString().split('T')[0]}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="stack gap-10 content">
					{entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} />}
					<div class={`content ${hasCitations ? 'has-citations' : ''}`}>
						<Content />
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	/* Citation styling */
	.content :global(.citation-paragraph) {
		margin-top: 2rem !important;
		padding: 1.5rem !important;
		background: var(--gray-999) !important;
		border: 1px solid var(--gray-800) !important;
		border-radius: 0.75rem !important;
		font-size: var(--text-sm) !important;
		color: var(--gray-300) !important;
	}

	.content :global(.citation-paragraph a) {
		color: var(--accent-light) !important;
		text-decoration: underline !important;
		text-decoration-color: transparent !important;
		transition: text-decoration-color var(--theme-transition) !important;
	}

	.content :global(.citation-paragraph a:hover),
	.content :global(.citation-paragraph a:focus) {
		text-decoration-color: currentColor !important;
	}

	/* Inline citation link styling */
	.content :global(.citation-link) {
		color: var(--accent-regular) !important;
		text-decoration: none !important;
		font-weight: 500 !important;
		padding: 0.1rem 0.2rem !important;
		border-radius: 0.25rem !important;
		transition: all var(--theme-transition) !important;
	}

	.content :global(.citation-link:hover),
	.content :global(.citation-link:focus) {
		background: var(--accent-regular) !important;
		color: var(--gray-999) !important;
		text-decoration: none !important;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>

<script is:inline>
	// Enhanced citation system with clickable links
	function setupCitations() {
		const contentDiv = document.querySelector('.content');
		if (!contentDiv) return;

		const paragraphs = contentDiv.querySelectorAll('p');
		const citationMap = new Map();

		// First pass: Find and style citation paragraphs, create ID map
		paragraphs.forEach(p => {
			const text = p.textContent?.trim() || '';
			// Check if paragraph starts with citation pattern like [1], [2], etc.
			const match = text.match(/^\[(\d+)\]/);
			if (match) {
				const citationNumber = match[1];
				const citationId = `citation-${citationNumber}`;

				// Style the citation paragraph
				p.classList.add('citation-paragraph');
				p.id = citationId;

				// Store in map for linking
				citationMap.set(citationNumber, citationId);
			}
		});

		// Second pass: Convert inline citations to clickable links
		paragraphs.forEach(p => {
			// Skip citation paragraphs themselves
			if (p.classList.contains('citation-paragraph')) return;

			// Find inline citations like [1], [2], etc. and convert to links
			let html = p.innerHTML;
			html = html.replace(/\[(\d+)\]/g, (match, number) => {
				if (citationMap.has(number)) {
					return `<a href="#citation-${number}" class="citation-link">${match}</a>`;
				}
				return match;
			});
			p.innerHTML = html;
		});
	}

	// Run immediately and also on DOM ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', setupCitations);
	} else {
		setupCitations();
	}
</script>